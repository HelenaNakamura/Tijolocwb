@startuml
skinparam sequenceMessageAlign direction
skinparam roundcorner 10
skinparam responseMessageBelowArrow true

title "<&person> Esqueci minha senha"

actor Cliente as cliente
participant "esqueciSenha.html" as paginaEsqueciMinhaSenha <<Formulário Esqueci Minha Senha>>
participant "esqueciSenha.js" as jsEsqueciMinhaSenha <<Lógica do Formulário>>
participant "senha-api.js" as controller <<(C,#ADD1B2) Controlador>>
participant "senha-service.js" as service <<(S,#ADD1B2) Serviço>>
participant "senha-sql.js" as repository <<(R,#ADD1B2) Repositório>>
database "MySQL" as dbms

box "Telas: Front-end - HTML e JS" #Azure
	participant paginaEsqueciMinhaSenha
	participant jsEsqueciMinhaSenha
end box

box "Lógica: Back-end - Servidor Node.JS" #LightGreen
	participant controller
	participant service
	participant repository
end box

box "Persistência: Banco de Dados" #SkyBlue
	participant dbms
end box

' -------------------------------------------------------
' Validar Email para trocar senha: Estamos no Front
' -------------------------------------------------------
cliente -> paginaEsqueciMinhaSenha : Visita a Página

paginaEsqueciMinhaSenha -> paginaEsqueciMinhaSenha : Informa o E-mail

paginaEsqueciMinhaSenha -> paginaEsqueciMinhaSenha : Informa a nova Senha

paginaEsqueciMinhaSenha -> jsEsqueciMinhaSenha : Clica em "Confirmar"\n(evento ""onSubmit"")

' -------------------------------------------------------

group Jornadas do Usuário [<color:green>Caminho Feliz</color>]

    jsEsqueciMinhaSenha -> jsEsqueciMinhaSenha : Valida o e-mail e a nova Senha
    activate jsEsqueciMinhaSenha
    jsEsqueciMinhaSenha -> controller : <&check> **Válido:**\n""{ email, senha }""
    note left: Permite o evento ""onSubmit""\ndo formulário acontecer
    deactivate jsEsqueciMinhaSenha

    activate controller
    controller -> service : ""clienteService.validar(emailCliente,senhaCliente)""
    activate service
    
    service -> service : Valida email e nova senha

    service -> repository : <&check> **Válido:**\n""clienteRepository.valida(emailCliente,senha)""
    activate repository

    repository -> dbms : ""SELECT * FROM usuario WHERE email = ...""
    repository -> dmbs : ""UPDATE usuario""
    activate dbms
    repository <- dbms : Usuario [email=..., senha=...]
    deactivate dbms

    service <- repository : Usuário atualizado no BD\n""{ email, senha }""
    deactivate repository

    controller <- service : Sucesso:\n""{ nome, email }""
    note left: Email e nova senha\n validada ;)
    deactivate service
    deactivate controller

' -------------------------------------------------------

else <color:red>Tratamento de Erros</color>: Erros no Formulário
    autonumber
    jsEsqueciMinhaSenha -> jsEsqueciMinhaSenha : Valida os dados
    jsEsqueciMinhaSenha -> paginaEsqueciMinhaSenha : <color:red><&ban> **Inválido:**</color>\nInforma os erros ao Cliente

' -------------------------------------------------------

else <color:red>Tratamento de Erros</color>: Erros no Servidor
    autonumber
    jsEsqueciMinhaSenha -> jsEsqueciMinhaSenha : Valida os dados
    activate jsEsqueciMinhaSenha
        jsEsqueciMinhaSenha -> controller : <&check> **Válido:**\n""{ email, senha }""
        note left: Permite o evento ""onSubmit""\ndo formulário acontecer
    deactivate jsEsqueciMinhaSenha

    controller -> service : clienteService.validar(emailCliente,senha)
    activate service
    service -> service : Valida os dados
    service -> controller : **Inválido**
    destroy service
    controller -> paginaEsqueciMinhaSenha : <color:red><&warning> **Erro:**</color>\n"Dados inválidos! Por favor, corrija e tente novamente."


end
@enduml